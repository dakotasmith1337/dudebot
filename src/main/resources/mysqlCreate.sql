DROP DATABASE IF EXISTS Dude;
CREATE DATABASE Dude;
USE Dude;

CREATE TABLE Guild(
	ID BIGINT NOT NULL UNIQUE,
	Name VARCHAR(100) NOT NULL,
    PRIMARY KEY (ID)
);

CREATE TABLE UserJoinSetting(
	ID BIGINT NOT NULL UNIQUE AUTO_INCREMENT,
	GuildID BIGINT NOT NULL UNIQUE,
    Enabled BIT NOT NULL DEFAULT b'0',
    Mention BIT NOT NULL DEFAULT b'1',
    Message VARCHAR(2000),
    ChannelID BIGINT UNIQUE,
	PRIMARY KEY (ID),
    FOREIGN KEY (GuildID)
    REFERENCES Guild(ID)
    ON DELETE CASCADE
    ON UPDATE CASCADE
);

CREATE TABLE ReminderSetting(
	ID BIGINT NOT NULL UNIQUE AUTO_INCREMENT,
	GuildID BIGINT NOT NULL UNIQUE,
	RestrictReminders BIT NOT NULL DEFAULT b'0',
	Whitelist BIT NOT NULL DEFAULT b'1',
	PRIMARY KEY (ID),
	FOREIGN KEY (GuildID)
	REFERENCES Guild(ID)
	ON DELETE CASCADE
	ON UPDATE CASCADE
);

CREATE TABLE BotRoutine(
	ID BIGINT NOT NULL UNIQUE AUTO_INCREMENT,
    GuildID BIGINT NOT NULL,
	UserTrigger VARCHAR(768) NOT NULL,
    Response VARCHAR(768) NOT NULL,
    FindSetting TINYINT NOT NULL DEFAULT 0,
    CaseSensitive BIT NOT NULL DEFAULT b'0',
	Filter BIT NOT NULL DEFAULT b'0',
	FilterRoleID BIGINT UNIQUE,
    PRIMARY KEY (ID),
    FOREIGN KEY (GuildID)
    REFERENCES Guild(ID)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
	INDEX user_trigger (UserTrigger)
);

CREATE TABLE ColorRole(
	ID BIGINT NOT NULL UNIQUE,
    GuildID BIGINT NOT NULL,
    PRIMARY KEY (ID),
    FOREIGN KEY (GuildID)
    REFERENCES Guild(ID)
    ON DELETE CASCADE
    ON UPDATE CASCADE
);

CREATE TABLE Reminder(
	ID BIGINT NOT NULL UNIQUE AUTO_INCREMENT,
    EventString VARCHAR(2000) NOT NULL,
    EventTime BIGINT NOT NULL,
    Mention BIT NOT NULL DEFAULT b'1',
	Recurring BIT NOT NULL DEFAULT b'0',
	FrequencyAmount BIGINT,
	Frequency VARCHAR(6),
    UserID BIGINT NOT NULL,
    ChannelID BIGINT NOT NULL,
    PRIMARY KEY (ID),
	INDEX reminder_time (EventTime)
);

CREATE TABLE ReminderChannel(
	ID BIGINT NOT NULL UNIQUE,
	GuildID BIGINT NOT NULL,
	PRIMARY KEY (ID),
	FOREIGN KEY (GuildID)
	REFERENCES Guild(ID)
	ON DELETE CASCADE
	ON UPDATE CASCADE
);

COMMIT;